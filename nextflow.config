/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/rnadnavar Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Dbam_laign.configefault config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {
    // Input options - mandatory
    input                           = null  // sample sheet
    input_restart                   = null
    step                            = 'mapping' // Starts with mapping
    skip_tools                      = null       // All tools (markduplicates + baserecalibrator + QC) are used by default
    save_bam_mapped                 = false      // Mapped BAMs not saved
    save_output_as_bam              = false      //Output files from preprocessing are saved as bam and not as cram files
    rna                             = true
    dna                             = true

    // Genome and reference options
    genome                          = 'GRCh38'
    igenomes_base                   = 's3://ngi-igenomes/igenomes'
    igenomes_ignore                 = false
    save_reference                  = false
    build_only_index                = false // Only build the reference indexes
    download_cache                  = false // Do not download annotation cache
    fasta_fai                       = null
    dict                            = null



    // Sequence read information
    read_length                     = 76 // Required for STAR to build index and align reads TODO: automate
    wes                             = false       // Set to true, if data is exome/targeted sequencing data. Used to use correct models in various variant callers

    // Alignment
    bwa                             = null
    bwamem2                         = null
    star_index                      = null
    aligner                         = 'bwa-mem'    // Only STAR is currently supported.
    star_twopass                    = true
    star_ignore_sjdbgtf             = false     // Ignore GTF file while creating index or alignment by STAR
    star_max_memory_bamsort         = 0         // STAR parameter limitBAMsortRAM to specify maximum RAM for sorting BAM
    star_bins_bamsort               = 50        // STAR parameter outBAMsortingBinsN to specify number of bins for sorting BAM
    star_max_collapsed_junc         = 1000000   // STAR parameter limitOutSJcollapsed to specify max number of collapsed junctions
    seq_center                      = null
    seq_platform                    = 'ILLUMINA' // Required for preparing for BAM headers for GATK to work
    bam_csi_index                   = false
    save_unaligned                  = false
    save_align_intermeds            = false
    hisat2_build_memory             = "200.GB"
    splicesites                     = null
    remove_duplicates               = false
    save_mapped                     = false      // Mapped BAMs not saved
    hisat2_index                    = null
    dragmap                         = null
    gff                             = null


    // Modify fastqs (trim/split) with FASTP
    trim_fastq          = false // No trimming
    clip_r1             = 0
    clip_r2             = 0
    three_prime_clip_r1 = 0
    three_prime_clip_r2 = 0
    trim_nextseq        = 0
    split_fastq         = 50000000   // FASTQ files will not be split by default by FASTP
    save_trimmed        = false
    save_split_fastqs   = false


    // Variant calling
    only_paired_variant_calling     = false
    no_intervals                    = false
    intervals                       = null
    nucleotides_per_second          = 200000 // Default interval size
    germline_resource               = null
    germline_resource_tbi           = null
    dbsnp                           = null
    dbsnp_tbi                       = null
    known_indels                    = null
    known_indels_tbi                = null
    known_snps                      = null
    known_snps_tbi                  = null
    pon                             = null
    pon_tbi                         = null
    sage_actionablepanel            = null
    sage_highconfidence             = null
    sage_knownhotspots              = null
    sage_custom_args                = "-validation_stringency LENIENT"
    sage_resource_dir               = null
    sage_ensembl_dir                = null
    joint_mutect2                   = false // if true, enables patient-wise multi-sample somatic variant calling



    // GATK intervallist parameters
    gatk_interval_scatter_count     = 25
    ignore_soft_clipped_bases       = true

    // Variant annotation
    tools                     = null  // No default Variant_Calling or Annotation tools
    genesplicer               = null // genesplicer disabled within VEP
    dbnsfp                    = null // No dbnsfp processed file
    dbnsfp_consequence        = null // No default consequence for dbnsfp plugin
    dbnsfp_fields             = "rs_dbSNP,HGVSc_VEP,HGVSp_VEP,1000Gp3_EAS_AF,1000Gp3_AMR_AF,LRT_score,GERP++_RS,gnomAD_exomes_AF" // Default fields for dbnsfp plugin
    dbnsfp_tbi                = null // No dbnsfp processed file index
    spliceai_indel            = null // No spliceai_indel file
    spliceai_indel_tbi        = null // No spliceai_indel file index
    spliceai_snv              = null // No spliceai_snv file
    spliceai_snv_tbi          = null // No spliceai_snv file index
    vep_custom_args           = "--no_progress --offline --shift_hgvs 1 --check_existing --tsl --domains --total_length --allele_number --no_escape --xref_refseq --failed 1 --flag_pick_allele --pick_order canonical,tsl,biotype,rank,ccds,length --format vcf --biotype --force_overwrite --sift p --polyphen p --variant_class --regulatory --allele_number --af_gnomad --af_gnomadg --gene_phenotype --hgvs --hgvsg --max_af"
    vep_cache                 = null // No directory for VEP cache
    vep_include_fasta         = true // Don't use fasta file for annotation with VEP
    vep_dbnsfp                = null
    vep_loftee                = null
    vep_spliceai              = null
    vep_spliceregion          = null
    vep_out_format            = 'vcf'
    vep_cache_version         = '110'
    vep_species               = 'homo_sapiens'
    vep_genome                = null
    outdir_cache              = null // No default outdir cache

    //filtering
    whitelist                  = null
    blacklist                  = null
    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    outdir                       = null
    publish_dir_mode             = 'copy'
    email                        = null
    email_on_fail                = null
    plaintext_email              = false
    monochrome_logs              = false
    hook_url                     = null
    help                         = false
    version                      = false
    pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/'

    // Config options
    config_profile_name        = null
    config_profile_description = null
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null
    test_data_base             = 'https://raw.githubusercontent.com/nf-core/test-datasets/rnadnavar'


    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = true
    validationSchemaIgnoreParams     = 'genomes,igenomes_base'
    validationShowHiddenParams       = false
    validate_params                  = true

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/rnadnavar custom profiles from different institutions.
try {
    includeConfig "${params.custom_config_base}/pipeline/rnadnavar.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/rnadnavar profiles: ${params.custom_config_base}/pipeline/rnadnavar.config")
}
profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
    }
    // Basic test profile for CI
    test                       { includeConfig 'conf/test.config' }
    test_full                  { includeConfig 'conf/test_full.config' }
    test_cache                 { includeConfig 'conf/test/cache.config' }
    tools_tumoronly            { includeConfig 'conf/test/tools_tumoronly.config' }
    tools_pairedcalling        { includeConfig 'conf/test/tools_pairedcalling.config' }

    // Extra test profiles for more complete CI
    alignment_to_fastq         { includeConfig 'conf/test/alignment_to_fastq.config' }
    splitncigar_cram           { includeConfig 'conf/test/splitncigar_cram.config' }
    annotation                 { includeConfig 'conf/test/annotation.config' }
    markduplicates_bam         { includeConfig 'conf/test/markduplicates_bam.config' }
    markduplicates_cram        { includeConfig 'conf/test/markduplicates_cram.config' }
    pair                       { includeConfig 'conf/test/pair.config' }
    prepare_recalibration_bam  { includeConfig 'conf/test/prepare_recalibration_bam.config' }
    prepare_recalibration_cram { includeConfig 'conf/test/prepare_recalibration_cram.config' }
    recalibrate_bam            { includeConfig 'conf/test/recalibrate_bam.config' }
    recalibrate_cram           { includeConfig 'conf/test/recalibrate_cram.config' }
    save_bam_mapped            { includeConfig 'conf/test/save_bam_mapped.config' }
    variantcalling_channels    { includeConfig 'conf/test/variantcalling_channels.config' }

}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation@1.1.3' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
def tracedir        = params.outdir + "/pipeline_info"
timeline {
    enabled = true
    file    = "${tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/rnadnavar'
    author          = """Raquel Manzano-Garcia"""
    homePage        = 'https://github.com/nf-core/rnadnavar'
    description     = """Pipeline for RNA and DNA integrated analysis for somatic mutation detection"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules/modules.config'

// prepare reference
includeConfig 'conf/modules/prepare_resources/prepare_cache.config'
includeConfig 'conf/modules/prepare_resources/prepare_genome.config'
includeConfig 'conf/modules/prepare_resources/prepare_intervals.config'

// quality control
includeConfig 'conf/modules/quality_control/quality_control.config'
includeConfig 'conf/modules/quality_control/trimming.config'

// alignment
includeConfig 'conf/modules/alignment/bam_align.config'
includeConfig 'conf/modules/alignment/alignment_to_fastq.config'

// preprocessing
includeConfig 'conf/modules/gatk4_preprocessing/markduplicates.config'
includeConfig 'conf/modules/gatk4_preprocessing/splitncigarreads.config'
includeConfig 'conf/modules/gatk4_preprocessing/prepare_recalibration.config'
includeConfig 'conf/modules/gatk4_preprocessing/recalibrate.config'

// variant calling
includeConfig 'conf/modules/variant_calling/strelka.config'
includeConfig 'conf/modules/variant_calling/manta.config'
includeConfig 'conf/modules/variant_calling/mutect2.config'
includeConfig 'conf/modules/variant_calling/sage.config'

// normalisation
includeConfig 'conf/modules/normalise/vt.config'

// annotate
includeConfig 'conf/modules/annotate/annotate.config'

// consensus
includeConfig 'conf/modules/consensus/vcf_consensus.config'

// filtering
includeConfig 'conf/modules/filtering/maf_filtering.config'

// prepare realignment
includeConfig 'conf/modules/prepare_realignment/filtersamreads.config'
includeConfig 'conf/modules/prepare_realignment/extract_reads_id.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
